<?php
/**
 * Created by PhpStorm.
 * User: claudio
 * Date: 23/07/15
 * Time: 0.59
 */

namespace it\thecsea\twofactorDir;

/**
 * Class twofactorDir
 * @author Claudio Cardinale <cardi@thecsea.it>
 * @copyright 2015 Claudio Cardinale
 * @version 1.0.0
 * @package it\thecsea\twofactorDir
 */
class twofactorDir
{
    /**
     * @var string
     */
    private $dir;
    /**
     * @var twofactorAdapter
     */
    private $twofactorAdapter;
    /**
     * @var string
     */
    private $secret;
    /**
     * @var string
     */
    private $cookieCode;

    public function __construct($dir = ".", $cookieCode="", $serviceName = "none")
    {
        if($cookieCode=="")
            $cookieCode = md5(rand());
        $this->dir = $dir;
        $this->cookieCode = $cookieCode;
        $this->twofactorAdapter = new twofactorAdapter();
        $this->twofactorAdapter->setDir($this->dir);
        $this->twofactorAdapter->setServiceName($serviceName);
        $secret = $this->readSecret();
        if($secret &&  $secret != 1) {
            //I have a secret stored, so I set it as secret
            $this->twofactorAdapter->setSecret($secret);
        }else
        {
            //I don't have a secret stored so I store the secret generated by library
            $this->storeSecret($this->twofactorAdapter->getSecret());
        }
        $this->secret = $this->twofactorAdapter->getSecret();
    }

    /**
     * The __toString method allows a class to decide how it will react when it is converted to a string.
     *
     * @return string
     * @link http://php.net/manual/en/language.oop5.magic.php#language.oop5.magic.tostring
     */
    public function __toString()
    {
        // TODO: Implement __toString() method.
    }

    /**
     * When an object is cloned, PHP 5 will perform a shallow copy of all of the object's properties.
     * Any properties that are references to other variables, will remain references.
     * Once the cloning is complete, if a __clone() method is defined,
     * then the newly created object's __clone() method will be called, to allow any necessary properties that need to be changed.
     * NOT CALLABLE DIRECTLY.
     *
     * @return mixed
     * @link http://php.net/manual/en/language.oop5.cloning.php
     */
    public function __clone()
    {
        // TODO: Implement __clone() method.
    }


    /**
     *
     */
    static private function redirect()
    {
        //header("HTTP/1.1 301 Moved Permanently");
        header("Location: ".(isset($_SERVER["REQUEST_SCHEME"]) && $_SERVER["REQUEST_SCHEME"] == "https"?"https":"http")."://".$_SERVER["HTTP_HOST"]."".$_SERVER["REQUEST_URI"]);
    }

    /**
     * CAUTION this method uses cookie, it must be called before any print
     * this method check if the cookie exists and if it is correct, if it is correct the method perform redirect
     * @return bool true if the redirect is done
     */
    public function redirectCheck()
    {
        if(isset($_COOKIE['twofactorDir-'.$this->dir]) && $_COOKIE['twofactorDir-'.$this->dir] == $this->cookieCode)
        {
            self::redirect();
            return true;
        }else
        {
            return false;
        }
    }


    /**
     * Get QR code URL
     * @return string
     */
    public function getURL()
    {
        return $this->twofactorAdapter->getURL();
    }

    /**
     * CAUTION this method uses cookie, it must be called before any print
     * this method checks code and performs login
     * this method perform redirect if the code is correct, after setting the cookie
     * @param string $code
     * @return bool true if the code is corret
     */
    public function checkCode($code)
    {
        $res = $this->twofactorAdapter->check($code);

        if($res)
        {
            setcookie('twofactorDir-' . $this->dir, $this->cookieCode, 0, "/");
            self::redirect();
        }

        return $res;
    }


    /**
     * store the secret in file
     * @param string $secret
     */
    private function storeSecret($secret)
    {
        $str = "<?php\nreturn \"$secret\";";
        file_put_contents($this->dir."/secret.php",$str);
    }

    /**
     * return the secret stored in file
     * @return string
     */
    private function readSecret()
    {
        $name = $this->dir."/secret.php";
        return (require ($name));
    }


    /**
     * Install library into a dir
     * @param string $dir dir must be absolute link
     */
    static public function install($dir = ".")
    {
        $cookieCode = md5(rand());
        $strReplaceS = array("{SRC_DIR}", "{CUR_DIR}", "{COOKIE_CODE}");
        $strReplaceR = array(__DIR__."/..", $dir, $cookieCode);
        $f = fopen($dir . "/.htaccess", "a");
        fwrite($f, str_replace($strReplaceS,$strReplaceR,file_get_contents(__DIR__ . "/../files/x.htaccess")));
        fclose($f);

        $f = fopen($dir . "/redirect.php", "w");
        fwrite($f, str_replace($strReplaceS,$strReplaceR,file_get_contents(__DIR__ . "/../files/redirect.php")));
        fclose($f);

        $f = fopen($dir . "/get_code.php", "w");
        fwrite($f, str_replace($strReplaceS,$strReplaceR,file_get_contents(__DIR__ . "/../files/get_code.php")));
        fclose($f);
    }
}